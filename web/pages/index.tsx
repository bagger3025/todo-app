import {
	PageObjectResponse,
	QueryDatabaseResponse,
} from "@notionhq/client/build/src/api-endpoints";
import Head from "next/head";
import { Dispatch, SetStateAction, useRef, useState } from "react";
import { json } from "stream/consumers";

async function queryAddItem() {
	const response = await fetch("/api/addPage", {
		method: "POST",
		cache: "no-cache",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify({
			text: "HELLO",
		}),
	});
	const result = await response.json();
	console.log(result);
}

async function retrievePage() {
	const response = await fetch("/api/retrievePage", {
		method: "POST",
		cache: "no-cache",
		headers: {
			"Content-Type": "application/json",
		},
	});

	const result = await response.json();
	console.log(result);
}

async function testDB() {
	const response = await fetch("/api/testDB", {
		method: "POST",
		cache: "no-cache",
		headers: {
			"Content-Type": "application/json",
		},
	});

	const result = await response.json();
	console.log(result);
}

async function makePlan(val: string) {
	const response = await fetch("/api/makePlan", {
		method: "POST",
		cache: "no-cache",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify({
			title: val,
		}),
	});
	const result = await response.json();
	console.log(result);
}

async function getPlan() {
	const response = await fetch("/api/getPlan", {
		method: "POST",
		cache: "no-cache",
		headers: {
			"Content-Type": "application/json",
		},
	});
	const result: QueryDatabaseResponse | { ok: boolean } = await response.json();
	console.log(result);
	const resultArray: PageObjectResponse[] = [];
	if ("results" in result) {
		result.results.forEach((ele) => {
			if ("properties" in ele) {
				resultArray.push(ele);
			}
		});
	}
	return resultArray;
}

export default function Home() {
	// https://driip.me/7126d5d5-1937-44a8-98ed-f9065a7c35b5
	const addPageInput = useRef<HTMLInputElement>(null);

	const [loading, setLoading] = useState(false);
	const [planList, setplanList] = useState<PageObjectResponse[]>([]);
	const [getPlanLoading, setPlanLoading] = useState(false);

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div>sdf</div>
			<button onClick={() => queryAddItem()}>Submit</button> <br />
			<button onClick={() => retrievePage()}>Retrieve page</button> <br />
			<button onClick={() => testDB()}> Test DB </button> <br />
			<form>
				일정 추가: <input name="wow1" ref={addPageInput}></input>
				{!loading ? (
					<button
						onClick={(e) => {
							e.preventDefault();
							if (addPageInput.current) {
								setLoading(true);
								makePlan(addPageInput.current.value).then((e) =>
									setLoading(false)
								);
							}
						}}
					>
						제출
					</button>
				) : (
					<div>Loading</div>
				)}
			</form>
			<ul>
				{planList.map((ele) => {
					if ("title" in ele.properties["이름"])
						return (
							<li key={ele.id}>{ele.properties["이름"].title[0].plain_text}</li>
						);
				})}
			</ul>
			{!getPlanLoading ? (
				<button
					onClick={() => {
						setPlanLoading(true);
						getPlan().then((ele) => {
							setplanList(ele);
							setPlanLoading(false);
						});
					}}
				>
					getPlan
				</button>
			) : (
				<div>Loading</div>
			)}
		</>
	);
}
